{"version":3,"sources":["../../src/js/live-delphi-comment.js"],"names":["$","widget","_create","openComment","dialog","swiper","Swiper","slidesPerView","spaceBetween","loop","autoplay","autoplayDisableOnInteraction","element","on","event","_onCommentContainerClick","_onAddChildCommentClick","commentText","find","val","show","values","liveDelphiChart","document","body","liveDelphiClient","x","y","commentContainer","target","parents","attr","console","log","bootbox","title","text","message","renderChildComment","color","data","parentCommentId","hide","childCommentContainer","childComment","addClass","css","append","comment","appendTo","each","index","renderRootComment","newSlide","id","appendSlide","outerHTML"],"mappings":"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","file":"live-delphi-comment.js","sourcesContent":["/* global window, document, WebSocket, MozWebSocket, $, _, bootbox*/\n(function() {\n  'use strict';\n  \n  $.widget(\"custom.liveDelphiComment\", {\n    \n    _create: function() {\n      this.openComment = null;\n      this.dialog = null;\n      this.swiper = new Swiper('.swiper-container', {\n        slidesPerView: 1,\n        spaceBetween: 5,\n        loop: true,\n        autoplay: 2000,\n        autoplayDisableOnInteraction: false\n      });\n\n      $(this.element).on('click', '.comment-container', (event) => { this._onCommentContainerClick(event); });\n      $(this.element).on('click', '.send-child-comment', (event) => { this._onAddChildCommentClick(event); });\n    },\n\n    _onAddChildCommentClick: function(event) {\n      const commentText = this.element.find('.child-comment-input').val();\n      \n      if (commentText) {\n        this.dialog.find('.bootbox-body').find('.loader-container').show();\n        const values = $(\"#chart\").liveDelphiChart('getCurrentValues');\n        $(document.body).liveDelphiClient('sendMessage', {\n          'type': 'comment',\n          'comment': commentText,\n          'parentCommentId': this.openComment,\n          'x': values.x,\n          'y': values.y\n        }); \n      }\n    },\n\n    _onCommentContainerClick: function(event) {\n      const commentContainer = $(event.target).parents('.comment-container');\n      this.openComment = commentContainer.attr('data-comment-id');\n      console.log(commentContainer);\n      $(document.body).liveDelphiClient('sendMessage', {\n        'type': 'comment-opened',\n        'commentId': this.openComment\n      });\n      this.dialog = bootbox.dialog({\n        title: commentContainer.find('.comment-text').text(),\n        message: '<div class=\"child-comments-container\"></div><p class=\"loader-container\"><i class=\"fa fa-spin fa-spinner\"></i> Loading...</p><div class=\"input-group\"><input type=\"text\" class=\"form-control child-comment-input\" placeholder=\"Kirjoita kommentti...\"><span class=\"input-group-btn\"><button class=\"btn btn-primary send-child-comment\" type=\"button\">Lähetä</button></span></div>'\n      });\n      \n      this.dialog.on('hidden.bs.modal', () => {\n        this.openComment = null;\n      });\n    },\n\n    renderChildComment: function(color, data) {\n      if (this.dialog && this.openComment === data.parentCommentId) {\n        this.dialog.find('.bootbox-body').find('.loader-container').hide();\n        const childCommentContainer = this.dialog.find('.bootbox-body').find('.child-comments-container');\n        const childComment = $('<blockquote>')\n          .addClass('blockquote')\n          .css('border-color', color)\n          .append($('<p>').text(data.comment));\n        childComment.appendTo(childCommentContainer);\n        \n        $.each(childCommentContainer.find('blockquote'), (index, element) => {\n          if (index % 2 === 0) {\n            $(element).addClass('blockquote-reverse');\n          }\n        });\n      }\n    },\n\n    renderRootComment: function(color, data) {\n      const newSlide = $('<div>')\n        .addClass('swiper-slide')\n        .append(\n          $('<div>')\n          .addClass('comment-container')\n          .attr('data-comment-id', data.id)\n          .append(\n            $('<div>')\n              .addClass('comment-ball')\n              .css('background', color),\n            $('<div>')\n              .addClass('comment-text')\n              .append($('<p>').text(data.comment))\n          )\n        );\n\n      this.swiper.appendSlide(newSlide[0].outerHTML);\n    }\n  });\n  \n})();"]}